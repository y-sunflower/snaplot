{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<code>snaplot</code>        Record and replay every step of your plotting process     <p><code>snaplot</code> is a Python package here to help your record your plotting process, without having to think about it!</p> <p>It's highly inspired by {camcorder}, an R package that does pretty much the same thing. If you're an R user, check it out!</p>"},{"location":"#why","title":"Why?","text":"<p>By nature, data visualization is an iterative process: no one creates the final, perfectly polished version of a graph on the first try. It always takes plenty of trial and error.</p> <p>Interestingly, visualizing this process can be quite insightful. That's where <code>snaplot</code> comes in.</p>"},{"location":"#how-to-use","title":"How to use?","text":"<p><code>snaplot</code> provides a single class (<code>Camera</code>) and is designed to be as easy-to-use as possible.</p> <pre><code>import matplotlib.pyplot as plt\nfrom snaplot import Camera\n\ncamera = Camera.start(\"my_movie\")\n\n# Step 1 \u2014 basic line\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3])\ncamera.snap()\n\n# Step 2 \u2014 change color\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\")\ncamera.snap()\n\n# Step 3 \u2014 increase line width\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5)\ncamera.snap()\n\n# Step 4 \u2014 add marker\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5, marker=\"o\")\ncamera.snap()\n\n# Step 5 \u2014 change marker size\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5, marker=\"o\", markersize=15)\ncamera.snap()\n\n# Step 6 \u2014 add legend\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5, marker=\"o\", markersize=15, label=\"cookies\")\nax.legend()\ncamera.snap()\n\n# Step 7 \u2014 change axis limits\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5, marker=\"o\", markersize=15, label=\"cookies\")\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\nax.legend()\ncamera.snap()\n\n# Step 8 \u2014 add title\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3], color=\"red\", lw=5, marker=\"o\", markersize=15, label=\"cookies\")\nax.set_xlim(0, 4)\nax.set_ylim(0, 4)\nax.legend()\nax.set_title(\"Final Look\")\ncamera.snap()\n\n# 8 images, 300ms/image\ncamera.stop(\"output.gif\", frame_duration=300)\n</code></pre> <p></p> <p>In short:</p> <ul> <li>you initiate a camera with <code>camera = Camera.start()</code></li> <li>you take snapshots with <code>camera.snap()</code></li> <li>you save your video with <code>camera.stop()</code></li> </ul> <p>For more info, check out the reference page</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install snaplot\n</code></pre>"},{"location":"#some-cool-things","title":"Some cool things","text":"<ul> <li>You can run <code>Camera.start()</code> multiple times with the same id without forgetting previous <code>camera.snap()</code>. Unless you set <code>force_new=True</code>, it will automatically recognize that you're still recording.</li> <li>Even after calling <code>camera.stop(\"file.gif\")</code>, you can keep recording. If you want to save the intermediate GIF, just use a different filename like <code>camera.stop(\"file2.gif\")</code>.</li> <li>It works with any matplotlib-based plotting library: seaborn, plotnine, etc</li> </ul>"},{"location":"camera/","title":"Reference","text":""},{"location":"camera/#snaplot.main.Camera","title":"<code>snaplot.main.Camera</code>","text":"<p>A class for capturing matplotlib figures and exporting them as a GIF.</p> <p>It works with every visualization library based on matplotlib such as seaborn, plotnine, etc, and matplotlib itself.</p> <p>Under the hood, it saves all intermediate files on the disk and combine them at the end using the <code>gifing</code> package.</p> <p>Attributes:</p> Name Type Description <code>verbose</code> <code>bool</code> <p>If True, prints log messages during execution.</p> <code>directory</code> <code>str</code> <p>Directory path where images are stored.</p> <code>n_images</code> <code>int</code> <p>Count of currently saved images.</p> <code>file_paths</code> <code>list</code> <p>List of saved image file paths.</p>"},{"location":"camera/#snaplot.main.Camera.get_files","title":"<code>get_files()</code>","text":"<p>Retrieve all current intermediate file paths.</p>"},{"location":"camera/#snaplot.main.Camera.snap","title":"<code>snap(fig=None, extension='png', **kwargs)</code>","text":"<p>Take a snapshot of your latest plot.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>The figure to save. If None, uses the current active figure.</p> <code>None</code> <code>extension</code> <code>str</code> <p>File extension/format to save the figure (e.g., 'png', 'jpg').</p> <code>'png'</code> <code>**kwargs</code> <code>Dict</code> <p>Additional keyword arguments passed to <code>fig.savefig</code>.</p> <code>{}</code>"},{"location":"camera/#snaplot.main.Camera.start","title":"<code>start(record_id, *, force_new=False, verbose=True)</code>  <code>classmethod</code>","text":"<p>Initiate a <code>Camera</code> instance and start to record.</p> <p>Parameters:</p> Name Type Description Default <code>record_id</code> <code>int</code> <p>Id used to make sure <code>snaplot</code> does not confuse records with each others.</p> required <code>force_new</code> <code>bool</code> <p>If True, re-start the recording from 0 (and 'forget' all previous images). This is useful to avoid accidently delete intermediate images when running <code>Camera.start()</code>.</p> <code>False</code> <code>verbose</code> <code>bool</code> <p>If True, enables logging of actions.</p> <code>True</code>"},{"location":"camera/#snaplot.main.Camera.stop","title":"<code>stop(path, frame_duration=100, n_repeat_last_frame=1, resolution='auto')</code>","text":"<p>Compile the saved images into a GIF.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Output path for the final GIF.</p> required <code>frame_duration</code> <code>int</code> <p>Duration of each frame in milliseconds.</p> <code>100</code> <code>n_repeat_last_frame</code> <code>int</code> <p>Number of times to repeat the last frame.</p> <code>1</code> <code>resolution</code> <code>Union[str, Tuple, List]</code> <p>An optional array with 2 integers (width and height, in pixels) for the resolution of the GIF. By default, it will use the dimensions of the last image in inches and convert them to pixels.</p> <code>'auto'</code>"},{"location":"camera/#usage","title":"Usage","text":"<pre><code>import matplotlib.pyplot as plt\nfrom snaplot import Camera\n\ncamera = Camera.start()\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 2, 3])  # first chart\ncamera.snap()\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [4, 2, 3], color=\"red\")  # second chart\ncamera.snap()\n\nfig, ax = plt.subplots()\nax.plot([1, 2, 3], [1, 5, 3], color=\"green\", lw=3)  # third chart\ncamera.snap()\n\nfig, ax = plt.subplots()\nax.plot([5, 2, 4], [2, 3, 3], color=\"blue\", lw=6)  # fourth chart\ncamera.snap()\n\ncamera.stop(\"my_file.gif\", frame_duration=300)\n</code></pre>"}]}